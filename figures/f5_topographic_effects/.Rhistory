)
# function to fit a mixed model with a given set of predictors with img_date and species as crossed random effects
fit_mixed_model <- function(predictors, response, data) {
# formula <- paste(response, " ~ ", paste(predictors, collapse = " + "), " + (", paste(predictors, collapse = " + "), "| img_date) + (", paste(predictors, collapse = " + "), "| species)")
formula <- paste(response, " ~ ", paste(predictors, collapse = " + "),  " + (1 | species) + (1 | img_date)")
model <- lmer(formula, data = data, REML = FALSE, control = lmerControl(optimizer = "bobyqa"))
return(model)
}
# fit all models
models_lwc <- map(predictor_combinations, ~fit_mixed_model(.x, "lwc_mean", md_lwc_scaled))
models_lwp <- map(predictor_combinations, ~fit_mixed_model(.x, "mpa_mean", md_lwp_scaled))
models_pd_lwp <- map(predictor_combinations, ~fit_mixed_model(.x, "mpa_mean", pd_lwp_scaled))
# extract the AIC values
aics_lwc <- map_dbl(models_lwc, AIC)
aics_lwp <- map_dbl(models_lwp, AIC)
aics_pd_lwp <- map_dbl(models_pd_lwp, AIC)
# create a dataframe with formulas and AIC values
aics_df_lwc <- tibble(formula = map_chr(predictor_combinations, ~paste(.x, collapse = " + ")), AIC = aics_lwc)
aics_df_lwp <- tibble(formula = map_chr(predictor_combinations, ~paste(.x, collapse = " + ")), AIC = aics_lwp)
aics_df_pd_lwp <- tibble(formula = map_chr(predictor_combinations, ~paste(.x, collapse = " + ")), AIC = aics_pd_lwp)
# Save out the AIC values and formulas in a csv file
write_csv(aics_df_lwc, "aics_df_lwc.csv")
write_csv(aics_df_lwp, "aics_df_lwp.csv")
write_csv(aics_df_pd_lwp, "aics_df_pd_lwp.csv")
# plot predicted vs. observed values for the best model
plot_predicted_vs_observed <- function(model, response, data, title) {
data$predicted <- predict(model, newdata = data)
ggplot(data, aes_string(x = response, y = "predicted")) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = "red") +
labs(title = title, x = "Observed", y = "Predicted")
}
plot_predicted_vs_observed(best_model_lwc, "lwc_mean", md_lwc_scaled, "LWC")
# change the working directory to the location of the R file
setwd("C:/Users/jeanallen/Desktop/SHIFT_CWC/figures/f2_topographic_effects_take2")
if (!("lme4" %in% installed.packages())) install.packages("lme4")
if (!("tidyverse" %in% installed.packages())) install.packages("tidyverse")
if (!("afex" %in% installed.packages())) install.packages("afex")
library(lme4)
library(tidyverse)
library(afex)
md_lwc <- read_csv("md_lwc.csv")
md_lwp <- read_csv("md_lwp.csv")
pd_lwp <- read_csv("pd_lwp.csv")
# scale the predictors
md_lwc_scaled <- md_lwc %>%
mutate(elevation = scale(elevation),
slope = scale(slope),
aspect = scale(aspect),
cwc = scale(cwc))
md_lwp_scaled <- md_lwp %>%
mutate(elevation = scale(elevation),
slope = scale(slope),
aspect = scale(aspect),
cwc = scale(cwc))
pd_lwp_scaled <- pd_lwp %>%
mutate(elevation = scale(elevation),
slope = scale(slope),
aspect = scale(aspect),
cwc = scale(cwc))
# list of every possible combination of predictors
predictor_combinations <- list(
c("1"),
c("elevation"),
c("slope"),
c("aspect"),
c("cwc"),
c("elevation", "slope"),
c("elevation", "aspect"),
c("elevation", "cwc"),
c("slope", "aspect"),
c("slope", "cwc"),
c("aspect", "cwc"),
c("elevation", "slope", "aspect"),
c("elevation", "slope", "cwc"),
c("elevation", "aspect", "cwc"),
c("slope", "aspect", "cwc"),
c("elevation", "slope", "aspect", "cwc")
)
# function to fit a mixed model with a given set of predictors with img_date and species as crossed random effects
fit_mixed_model <- function(predictors, response, data) {
# formula <- paste(response, " ~ ", paste(predictors, collapse = " + "), " + (", paste(predictors, collapse = " + "), "| img_date) + (", paste(predictors, collapse = " + "), "| species)")
formula <- paste(response, " ~ ", paste(predictors, collapse = " + "),  " + (1 | img_date) + (1 | species)")
model <- lmer(formula, data = data, REML = FALSE, control = lmerControl(optimizer = "bobyqa"))
return(model)
}
# fit all models
models_lwc <- map(predictor_combinations, ~fit_mixed_model(.x, "lwc_mean", md_lwc_scaled))
models_lwp <- map(predictor_combinations, ~fit_mixed_model(.x, "mpa_mean", md_lwp_scaled))
models_pd_lwp <- map(predictor_combinations, ~fit_mixed_model(.x, "mpa_mean", pd_lwp_scaled))
# extract the AIC values
aics_lwc <- map_dbl(models_lwc, AIC)
aics_lwp <- map_dbl(models_lwp, AIC)
aics_pd_lwp <- map_dbl(models_pd_lwp, AIC)
# create a dataframe with formulas and AIC values
aics_df_lwc <- tibble(formula = map_chr(predictor_combinations, ~paste(.x, collapse = " + ")), AIC = aics_lwc)
aics_df_lwp <- tibble(formula = map_chr(predictor_combinations, ~paste(.x, collapse = " + ")), AIC = aics_lwp)
aics_df_pd_lwp <- tibble(formula = map_chr(predictor_combinations, ~paste(.x, collapse = " + ")), AIC = aics_pd_lwp)
# Save out the AIC values and formulas in a csv file
write_csv(aics_df_lwc, "aics_df_lwc.csv")
write_csv(aics_df_lwp, "aics_df_lwp.csv")
write_csv(aics_df_pd_lwp, "aics_df_pd_lwp.csv")
# Find the best model for each response variable
best_model_lwc <- models_lwc[[which.min(aics_lwc)]]
best_model_lwp <- models_lwp[[which.min(aics_lwp)]]
best_model_pd_lwp <- models_pd_lwp[[which.min(aics_pd_lwp)]]
# print the formulas of the best models
summary(best_model_lwc)
summary(best_model_lwp)
summary(best_model_pd_lwp)
# plot predicted vs. observed values for the best model
plot_predicted_vs_observed <- function(model, response, data, title) {
data$predicted <- predict(model, newdata = data)
ggplot(data, aes_string(x = response, y = "predicted")) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = "red") +
labs(title = title, x = "Observed", y = "Predicted")
}
plot_predicted_vs_observed(best_model_lwc, "lwc_mean", md_lwc_scaled, "LWC")
plot_predicted_vs_observed(best_model_lwp, "mpa_mean", md_lwp_scaled, "LWP")
plot_predicted_vs_observed(best_model_pd_lwp, "mpa_mean", pd_lwp_scaled, "PD LWP")
plot_predicted_vs_observed <- function(model, response, data) {
data <- data %>%
mutate(predicted = predict(model, newdata = data, re.form = NA),
residual = .data[[response]] - predicted)
ggplot(data, aes(x = .data[[response]], y = predicted, color = img_date)) +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = "Observed", y = "Predicted") +
theme_minimal()
}
plot_predicted_vs_observed(best_model_lwc, "lwc_mean", md_lwc_scaled, "LWC")
plot_predicted_vs_observed(best_model_lwc, "lwc_mean", md_lwc_scaled)
plot_predicted_vs_observed(best_model_lwp, "mpa_mean", md_lwp_scaled)
plot_predicted_vs_observed(best_model_pd_lwp, "mpa_mean", pd_lwp_scaled)
# change the working directory to the location of the R file
setwd("C:/Users/jeanallen/Desktop/SHIFT_CWC/figures/f2_topographic_effects_take2")
if (!("lme4" %in% installed.packages())) install.packages("lme4")
if (!("tidyverse" %in% installed.packages())) install.packages("tidyverse")
if (!("afex" %in% installed.packages())) install.packages("afex")
library(lme4)
library(tidyverse)
library(afex)
md_lwc <- read_csv("md_lwc.csv")
md_lwp <- read_csv("md_lwp.csv")
pd_lwp <- read_csv("pd_lwp.csv")
# scale the predictors
md_lwc_scaled <- md_lwc %>%
mutate(elevation = scale(elevation),
slope = scale(slope),
aspect = scale(aspect),
cwc = scale(cwc))
md_lwp_scaled <- md_lwp %>%
mutate(elevation = scale(elevation),
slope = scale(slope),
aspect = scale(aspect),
cwc = scale(cwc))
pd_lwp_scaled <- pd_lwp %>%
mutate(elevation = scale(elevation),
slope = scale(slope),
aspect = scale(aspect),
cwc = scale(cwc))
# list of every possible combination of predictors
predictor_combinations <- list(
c("1"),
c("elevation"),
c("slope"),
c("aspect"),
c("cwc"),
c("elevation", "slope"),
c("elevation", "aspect"),
c("elevation", "cwc"),
c("slope", "aspect"),
c("slope", "cwc"),
c("aspect", "cwc"),
c("elevation", "slope", "aspect"),
c("elevation", "slope", "cwc"),
c("elevation", "aspect", "cwc"),
c("slope", "aspect", "cwc"),
c("elevation", "slope", "aspect", "cwc")
)
# function to fit a mixed model with a given set of predictors with img_date and species as crossed random effects
fit_mixed_model <- function(predictors, response, data) {
# formula <- paste(response, " ~ ", paste(predictors, collapse = " + "), " + (", paste(predictors, collapse = " + "), "| img_date) + (", paste(predictors, collapse = " + "), "| species)")
formula <- paste(response, " ~ ", paste(predictors, collapse = " + "),  " + (1 | img_date) + (1 | species)")
model <- lmer(formula, data = data, REML = FALSE, control = lmerControl(optimizer = "bobyqa"))
return(model)
}
# fit all models
models_lwc <- map(predictor_combinations, ~fit_mixed_model(.x, "lwc_mean", md_lwc_scaled))
models_lwp <- map(predictor_combinations, ~fit_mixed_model(.x, "mpa_mean", md_lwp_scaled))
models_pd_lwp <- map(predictor_combinations, ~fit_mixed_model(.x, "mpa_mean", pd_lwp_scaled))
# extract the AIC values
aics_lwc <- map_dbl(models_lwc, AIC)
aics_lwp <- map_dbl(models_lwp, AIC)
aics_pd_lwp <- map_dbl(models_pd_lwp, AIC)
# create a dataframe with formulas and AIC values
aics_df_lwc <- tibble(formula = map_chr(predictor_combinations, ~paste(.x, collapse = " + ")), AIC = aics_lwc)
aics_df_lwp <- tibble(formula = map_chr(predictor_combinations, ~paste(.x, collapse = " + ")), AIC = aics_lwp)
aics_df_pd_lwp <- tibble(formula = map_chr(predictor_combinations, ~paste(.x, collapse = " + ")), AIC = aics_pd_lwp)
best_model_lwc <- models_lwc[[which.min(aics_lwc)]]
best_model_lwp <- models_lwp[[which.min(aics_lwp)]]
best_model_pd_lwp <- models_pd_lwp[[which.min(aics_pd_lwp)]]
summary(best_model_lwc)
models_pd_lwp
models_lwc
models_lwc[[-1]]
models_lwc[-1]
models_lwc[-1][-1]
which.min(aics_pd_lwp)
typeof(which.min(aics_pd_lwp))
models_lwc[[15]]
models_lwc[[16]]
# RMSE
predicted_values_cwc_lwc <- predict(models_lwc[[16]])
rmse_cwc_lwc <- rmse(md_lwc_scaled$lwc_mean, predicted_values_cwc_lwc)
library(Metrics)
install.packages("Metrics")
library(Metrics)
rmse_cwc_lwc <- rmse(md_lwc_scaled$lwc_mean, predicted_values_cwc_lwc)
rmse_cwc_lwc
models_lwc[[15]]
models_lwc[[16]]
models_lwc[[15]]
models_lwc[[14]]
models_lwc[[143]]
models_lwc[[13]]
models_lwc[[12]]
predicted_values_nocwc_lwc <- predict(models_lwc[[12]])
rmse_nocwc_lwc <- rmse(md_lwc_scaled$lwc_mean, predicted_values_nocwc_lwc)
rmse_nocwc_lwc
models_lwc[[12]]
predicted_values_cwc_lwp <- predict(models_lwp[[16]])
rmse_cwc_lwp <- rmse(md_lwp_scaled$mpa_mean, predicted_values_cwc_lwp)
rmse_cwc_lwp
predicted_values_nocwc_lwp <- predict(models_lwp[[12]])
rmse_nocwc_lwp <- rmse(md_lwp_scaled$mpa_mean, predicted_values_nocwc_lwp)
rmse_nocwc_lwp
predicted_values_cwc_pdlwp <- predict(models_pd_lwp[[16]])
rmse_cwc_pdlwp <- rmse(pd_lwp_scaled$mpa_mean, predicted_values_cwc_pdlwp)
rmse_cwc_pdlwp
predicted_values_nocwc_pdlwp <- predict(models_pd_lwp[[12]])
rmse_nocwc_pdlwp <- rmse(pd_lwp_scaled$mpa_mean, predicted_values_nocwc_pdlwp)
rmse_nocwc_pdlwp
mae(pd_lwp_scaled$mpa_mean, predicted_values_cwc_pdlwp)
mae_cwc_lwc <- mae(md_lwc_scaled$lwc_mean, predicted_values_cwc_lwc)
mae_nocwc_lwc <- mae(md_lwc_scaled$lwc_mean, predicted_values_nocwc_lwc)
mae_cwc_lwp <- mae(md_lwp_scaled$mpa_mean, predicted_values_cwc_lwp)
mae_nocwc_lwp <- mae(md_lwp_scaled$mpa_mean, predicted_values_nocwc_lwp)
mae_cwc_pdlwp <- mae(pd_lwp_scaled$mpa_mean, predicted_values_cwc_pdlwp)
mae_nocwc_pdlwp <- mae(pd_lwp_scaled$mpa_mean, predicted_values_nocwc_pdlwp)
models_lwp[[16]]
models_lwp[[12]]
models_pd_lwp[[12]]
models_pd_lwp[[16]]
if (!("Mumin" %in% installed.packages())) install.packages("Mumin")
if (!("MuMIn" %in% installed.packages())) install.packages("MuMIn")
library(MuMIn)
r2vals_cwc_lwc <- r.squaredGLMM(models_lwc[[16]])
r2vals_nocwc_lwc <- r.squaredGLMM(models_lwc[[12]])
r2vals_cwc_lwp <- r.squaredGLMM(models_lwp[[16]])
r2vals_nocwc_lwp <- r.squaredGLMM(models_lwp[[12]])
r2vals_cwc_pdlwp <- r.squaredGLMM(models_pd_lwp[[16]])
r2vals_nocwc_pdlwp <- r.squaredGLMM(models_pd_lwp[[12]])
library(lmerTest)
# change the working directory to the location of the R file
setwd("C:/Users/jeanallen/Desktop/SHIFT_CWC/figures/f2_topographic_effects_take2")
if (!("lme4" %in% installed.packages())) install.packages("lme4")
if (!("tidyverse" %in% installed.packages())) install.packages("tidyverse")
if (!("afex" %in% installed.packages())) install.packages("afex")
if (!("Metrics" %in% installed.packages())) install.packages("Metrics")
if (!("MuMIn" %in% installed.packages())) install.packages("MuMIn")
library(lmerTest)
library(tidyverse)
library(afex)
library(Metrics)
library(MuMIn)
md_lwc <- read_csv("md_lwc.csv")
md_lwp <- read_csv("md_lwp.csv")
pd_lwp <- read_csv("pd_lwp.csv")
# scale the predictors
md_lwc_scaled <- md_lwc %>%
mutate(elevation = scale(elevation),
slope = scale(slope),
aspect = scale(aspect),
cwc = scale(cwc))
md_lwp_scaled <- md_lwp %>%
mutate(elevation = scale(elevation),
slope = scale(slope),
aspect = scale(aspect),
cwc = scale(cwc))
pd_lwp_scaled <- pd_lwp %>%
mutate(elevation = scale(elevation),
slope = scale(slope),
aspect = scale(aspect),
cwc = scale(cwc))
# list of every possible combination of predictors
predictor_combinations <- list(
c("1"),
c("elevation"),
c("slope"),
c("aspect"),
c("cwc"),
c("elevation", "slope"),
c("elevation", "aspect"),
c("elevation", "cwc"),
c("slope", "aspect"),
c("slope", "cwc"),
c("aspect", "cwc"),
c("elevation", "slope", "aspect"),
c("elevation", "slope", "cwc"),
c("elevation", "aspect", "cwc"),
c("slope", "aspect", "cwc"),
c("elevation", "slope", "aspect", "cwc")
)
# function to fit a mixed model with a given set of predictors with img_date and species as crossed random effects
fit_mixed_model <- function(predictors, response, data) {
# formula <- paste(response, " ~ ", paste(predictors, collapse = " + "), " + (", paste(predictors, collapse = " + "), "| img_date) + (", paste(predictors, collapse = " + "), "| species)")
formula <- paste(response, " ~ ", paste(predictors, collapse = " + "),  " + (1 | img_date) + (1 | species)")
model <- lmer(formula, data = data, REML = FALSE, control = lmerControl(optimizer = "bobyqa"))
return(model)
}
# fit all models
models_lwc <- map(predictor_combinations, ~fit_mixed_model(.x, "lwc_mean", md_lwc_scaled))
models_lwp <- map(predictor_combinations, ~fit_mixed_model(.x, "mpa_mean", md_lwp_scaled))
models_pd_lwp <- map(predictor_combinations, ~fit_mixed_model(.x, "mpa_mean", pd_lwp_scaled))
# extract the AIC values
aics_lwc <- map_dbl(models_lwc, AIC)
aics_lwp <- map_dbl(models_lwp, AIC)
aics_pd_lwp <- map_dbl(models_pd_lwp, AIC)
# create a dataframe with formulas and AIC values
aics_df_lwc <- tibble(formula = map_chr(predictor_combinations, ~paste(.x, collapse = " + ")), AIC = aics_lwc)
aics_df_lwp <- tibble(formula = map_chr(predictor_combinations, ~paste(.x, collapse = " + ")), AIC = aics_lwp)
aics_df_pd_lwp <- tibble(formula = map_chr(predictor_combinations, ~paste(.x, collapse = " + ")), AIC = aics_pd_lwp)
# Save out the AIC values and formulas in a csv file
write_csv(aics_df_lwc, "aics_df_lwc.csv")
write_csv(aics_df_lwp, "aics_df_lwp.csv")
write_csv(aics_df_pd_lwp, "aics_df_pd_lwp.csv")
# Find the best model for each response variable
best_model_lwc <- models_lwc[[which.min(aics_lwc)]]
best_model_lwp <- models_lwp[[which.min(aics_lwp)]]
best_model_pd_lwp <- models_pd_lwp[[which.min(aics_pd_lwp)]]
# print the formulas of the best models
summary(best_model_lwc)
summary(best_model_lwp)
summary(best_model_pd_lwp)
# plot predicted vs. observed values for the best model
plot_predicted_vs_observed <- function(model, response, data, title) {
data$predicted <- predict(model, newdata = data)
ggplot(data, aes_string(x = response, y = "predicted")) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = "red") +
labs(title = title, x = "Observed", y = "Predicted")
}
plot_predicted_vs_observed(best_model_lwc, "lwc_mean", md_lwc_scaled, "LWC")
plot_predicted_vs_observed(best_model_lwp, "mpa_mean", md_lwp_scaled, "LWP")
plot_predicted_vs_observed(best_model_pd_lwp, "mpa_mean", pd_lwp_scaled, "PD LWP")
### calculate model evaluation metrics for full models, with and without CWC
# RMSE
predicted_values_cwc_lwc <- predict(models_lwc[[16]])
rmse_cwc_lwc <- rmse(md_lwc_scaled$lwc_mean, predicted_values_cwc_lwc)
predicted_values_nocwc_lwc <- predict(models_lwc[[12]])
rmse_nocwc_lwc <- rmse(md_lwc_scaled$lwc_mean, predicted_values_nocwc_lwc)
predicted_values_cwc_lwp <- predict(models_lwp[[16]])
rmse_cwc_lwp <- rmse(md_lwp_scaled$mpa_mean, predicted_values_cwc_lwp)
predicted_values_nocwc_lwp <- predict(models_lwp[[12]])
rmse_nocwc_lwp <- rmse(md_lwp_scaled$mpa_mean, predicted_values_nocwc_lwp)
predicted_values_cwc_pdlwp <- predict(models_pd_lwp[[16]])
rmse_cwc_pdlwp <- rmse(pd_lwp_scaled$mpa_mean, predicted_values_cwc_pdlwp)
predicted_values_nocwc_pdlwp <- predict(models_pd_lwp[[12]])
rmse_nocwc_pdlwp <- rmse(pd_lwp_scaled$mpa_mean, predicted_values_nocwc_pdlwp)
# MAE
mae_cwc_lwc <- mae(md_lwc_scaled$lwc_mean, predicted_values_cwc_lwc)
mae_nocwc_lwc <- mae(md_lwc_scaled$lwc_mean, predicted_values_nocwc_lwc)
mae_cwc_lwp <- mae(md_lwp_scaled$mpa_mean, predicted_values_cwc_lwp)
mae_nocwc_lwp <- mae(md_lwp_scaled$mpa_mean, predicted_values_nocwc_lwp)
mae_cwc_pdlwp <- mae(pd_lwp_scaled$mpa_mean, predicted_values_cwc_pdlwp)
mae_nocwc_pdlwp <- mae(pd_lwp_scaled$mpa_mean, predicted_values_nocwc_pdlwp)
# R2 values (first value marginal, second value conditional)
r2vals_cwc_lwc <- r.squaredGLMM(models_lwc[[16]])
r2vals_nocwc_lwc <- r.squaredGLMM(models_lwc[[12]])
r2vals_cwc_lwp <- r.squaredGLMM(models_lwp[[16]])
r2vals_nocwc_lwp <- r.squaredGLMM(models_lwp[[12]])
r2vals_cwc_pdlwp <- r.squaredGLMM(models_pd_lwp[[16]])
r2vals_nocwc_pdlwp <- r.squaredGLMM(models_pd_lwp[[12]])
summar(models_lwc[[16]])
summary(models_lwc[[16]])
summary(models_lwp[[16]])
summary(models_pd_lwp[[16]])
# change the working directory to the location of the R file
setwd("C:/Users/jeanallen/Desktop/SHIFT_CWC/figures/f2_topographic_effects_take2")
# change the working directory to the location of the R file
setwd("C:/Users/jeanallen/Desktop/SHIFT_CWC/figures/f2_topographic_effects")
# change the working directory to the location of the R file
setwd("C:/Users/jeanallen/Desktop/SHIFT_CWC/figures/f5_topographic_effects")
ll.packages("lme4")
if (!("lme4" %in% installed.packages())) install.packages("lme4")
if (!("tidyverse" %in% installed.packages())) install.packages("tidyverse")
if (!("afex" %in% installed.packages())) install.packages("afex")
if (!("Metrics" %in% installed.packages())) install.packages("Metrics")
if (!("MuMIn" %in% installed.packages())) install.packages("MuMIn")
library(lmerTest)
library(tidyverse)
library(afex)
library(Metrics)
library(MuMIn)
md_lwc <- read_csv("md_lwc.csv")
md_lwc <- read_csv("md_lwc.csv")
md_lwp <- read_csv("md_lwp.csv")
pd_lwp <- read_csv("pd_lwp.csv")
# scale the predictors
md_lwc_scaled <- md_lwc %>%
mutate(elevation = scale(elevation),
slope = scale(slope),
aspect = scale(aspect),
cwc = scale(cwc))
md_lwp_scaled <- md_lwp %>%
mutate(elevation = scale(elevation),
slope = scale(slope),
aspect = scale(aspect),
cwc = scale(cwc))
pd_lwp_scaled <- pd_lwp %>%
mutate(elevation = scale(elevation),
slope = scale(slope),
aspect = scale(aspect),
cwc = scale(cwc))
# list of every possible combination of predictors
predictor_combinations <- list(
c("1"),
c("elevation"),
c("slope"),
c("aspect"),
c("cwc"),
c("elevation", "slope"),
c("elevation", "aspect"),
c("elevation", "cwc"),
c("slope", "aspect"),
c("slope", "cwc"),
c("aspect", "cwc"),
c("elevation", "slope", "aspect"),
c("elevation", "slope", "cwc"),
c("elevation", "aspect", "cwc"),
c("slope", "aspect", "cwc"),
c("elevation", "slope", "aspect", "cwc")
)
# function to fit a mixed model with a given set of predictors with img_date and species as crossed random effects
fit_mixed_model <- function(predictors, response, data) {
# formula <- paste(response, " ~ ", paste(predictors, collapse = " + "), " + (", paste(predictors, collapse = " + "), "| img_date) + (", paste(predictors, collapse = " + "), "| species)")
# ^^ model with random slopes failed to converge
formula <- paste(response, " ~ ", paste(predictors, collapse = " + "),  " + (1 | img_date) + (1 | species)")
model <- lmer(formula, data = data, REML = FALSE, control = lmerControl(optimizer = "bobyqa"))
return(model)
}
# fit all models
models_lwc <- map(predictor_combinations, ~fit_mixed_model(.x, "lwc_mean", md_lwc_scaled))
models_lwp <- map(predictor_combinations, ~fit_mixed_model(.x, "mpa_mean", md_lwp_scaled))
models_pd_lwp <- map(predictor_combinations, ~fit_mixed_model(.x, "mpa_mean", pd_lwp_scaled))
models_lwc
models_lwc[-1]
models_lwc[16]
predictor_combinations
predictor_combinations[16]
predictor_combinations[15]
models_lwc[16]
get_model_metrics <- function(model) {
# Get residuals
res <- resid(model)
# Calculate metrics
bic <- BIC(model)
rmse <- sqrt(mean(res^2))
mae <- mean(abs(res))
# Get R² values
r2_vals <- performance::r2(model)
marginal_r2 <- r2_vals$R2_marginal
conditional_r2 <- r2_vals$R2_conditional
# Return results as data frame
metrics <- data.frame(
BIC = round(bic, 2),
RMSE = round(rmse, 4),
MAE = round(mae, 4),
Marginal_R2 = round(marginal_r2, 3),
Conditional_R2 = round(conditional_r2, 3)
)
return(metrics)
}
get_model_metrics(models_lwc[16])
get_model_metrics(models_lwc[[16])
get_model_metrics(models_lwc[[16]])
if (!requireNamespace("performance", quietly = TRUE)) {
stop("Please install the 'performance' package.")
}
library(performance)
if (!("performance" %in% installed.packages())) install.packages("performance")
library(performance)
get_model_metrics(models_lwc[[16]])
get_model_metrics(models_lwc[[16]])
summary(models_lwc[[16]])
predictor_combinations
predictor_combinations[[9]]
models_lwc[[9]]
get_model_metrics(models_lwc[[9]])
summary(models_lwc[[9]])
predictor_combinations
get_model_metrics(models_lwc[[15]])
summary(models_lwc[[15]])
models_lwp[[6]]
get_model_metrics(models_lwp[[6]])
get_model_metrics(models_lwp[[13]])
summary(models_lwp[[13]])
get_model_metrics(models_lwp[[3]])
get_model_metrics(models_lwp[[10]])
summary(models_lwp[[10]])
